{"version":3,"file":"static/js/640.e7da1f89.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.jsx","components/Contacts/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useToast } from '@chakra-ui/react';\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  Text,\n} from '@chakra-ui/react';\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const toast = useToast();\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          onSubmit={({ name, number }, { resetForm }) => {\n            const text = {\n              name: name,\n              number: number,\n            };\n            const contactsArray = contacts.filter(\n              contact => contact.name === text.name\n            );\n\n            if (contactsArray.length !== 0) {\n              toast({\n                title: `${text.name} is alredy in contacts`,\n                status: 'error',\n                isClosable: true,\n                position: 'top',\n              });\n              return;\n            }\n\n            dispatch(addContact(text));\n            resetForm({ name: '', phone: '' });\n          }}\n        >\n          {({ handleSubmit }) => (\n            <form onSubmit={handleSubmit}>\n              <Text fontSize=\"xl\" textAlign=\"center\" mb=\"20px\" color=\"teal\">\n                New Contact\n              </Text>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"number\">Phone</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"text\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"teal\" width=\"full\">\n                  Add\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { MdPersonSearch } from 'react-icons/md';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport {\n  Heading,\n  Flex,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n  return (\n    <Flex flexDirection=\"column\" gap=\"20px\">\n      <Heading as=\"h4\" size=\"md\" textAlign=\"center\">\n        Find contacts by name\n      </Heading>\n      <InputGroup size=\"md\">\n        <Input\n          placeholder=\"Search name...\"\n          size=\"md\"\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n          width={{ base: '350px', lg: '450px' }}\n        />\n        <InputLeftElement pointerEvents=\"none\">\n          <MdPersonSearch color=\"gray.400\" />\n        </InputLeftElement>\n      </InputGroup>\n    </Flex>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  List,\n  ListItem,\n  Flex,\n  Text,\n  Box,\n  Spacer,\n  Button,\n} from '@chakra-ui/react';\n\nimport { MdClose } from 'react-icons/md';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { GiSmartphone } from 'react-icons/gi';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = contacts.filter(\n    contact =>\n      contact.name && contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <List spacing={3} pt=\"20px\">\n      {filtredContacts.map(contact => {\n        return (\n          <ListItem\n            key={contact.id}\n            w=\"450px\"\n            borderColor=\"teal\"\n            borderWidth=\"1px\"\n            borderRadius=\"8px\"\n            p=\"8px\"\n            width={{ base: '350px', lg: '450px' }}\n          >\n            <Flex alignItems=\"center\">\n              <Box w=\"200px\">\n                <Text fontSize=\"md\">{contact.name}</Text>\n              </Box>\n              <Spacer />\n              <Box w=\"180px\">\n                <Flex gap=\"5px\" alignItems=\"center\">\n                  <GiSmartphone />\n                  <Text fontSize=\"md\">{contact.number}</Text>\n                </Flex>\n              </Box>\n              <Spacer />\n              <Box>\n                <Button\n                  color=\"#e74c3c\"\n                  w=\"50px\"\n                  variant=\"outline\"\n                  onClick={() => handleDelete(contact.id)}\n                >\n                  <MdClose />\n                </Button>\n              </Box>\n            </Flex>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations.js';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor.js';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { ContactList } from 'components/Contacts/ContactList.jsx';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { Flex, Box, Text } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Flex flexDirection={{ base: 'column', lg: 'row' }}>\n      <Box\n        bg=\"teal\"\n        p=\"20px\"\n        pt={{ base: '50px', lg: '100px' }}\n        height={{ base: '420px', lg: '100vh' }}\n        width={{ base: '100%', lg: '250px' }}\n      >\n        <ContactEditor />\n      </Box>\n      <Box p=\"20px\" m=\"0 auto\">\n        <Filter />\n        {isLoading && <Loader />}\n        {contacts.length === 0 && (\n          <Box pt=\"50px\">\n            <Text fontSize=\"4xl\" textAlign=\"center\">\n              No contacts yet\n            </Text>\n            <Text fontSize=\"4xl\" textAlign=\"center\">\n              Create your first contact in the form\n            </Text>\n          </Box>\n        )}\n\n        <ContactList />\n      </Box>\n    </Flex>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","ContactEditor","dispatch","useDispatch","useSelector","toast","useToast","bg","align","justify","p","rounded","w","initialValues","name","number","onSubmit","resetForm","text","contact","length","addContact","phone","title","status","isClosable","position","handleSubmit","fontSize","textAlign","mb","color","spacing","isRequired","htmlFor","as","Input","id","type","variant","colorScheme","width","Filter","flexDirection","gap","size","I","placeholder","value","onChange","evt","setFilter","currentTarget","base","lg","pointerEvents","ContactList","normalizedFilter","toLowerCase","filtredContacts","includes","pt","map","borderColor","borderWidth","borderRadius","alignItems","onClick","deleteContact","Contacts","useEffect","fetchContacts","height","m","Loader"],"sourceRoot":""}