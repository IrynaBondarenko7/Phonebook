{"version":3,"file":"static/js/981.542a8aac.chunk.js","mappings":"sOAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EACpBC,EAAkB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,mBCGvBC,EAAgB,WAC3B,IAAMC,GAAWC,EAAAA,EAAAA,MACXR,GAAWS,EAAAA,EAAAA,IAAYX,GAuB7B,OACE,iCACE,kBAAMY,SAvBW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,cACTC,EAAO,CACXC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,OAAQN,EAAKI,SAASE,OAAOD,OAMF,IAJPlB,EAASG,QAC7B,SAAAiB,GAAO,OAAIA,EAAQJ,OAASD,EAAKC,IAA1B,IAGSK,QAKlBd,GAASe,EAAAA,EAAAA,IAAWP,IACpBF,EAAKU,SALHC,EAAAA,GAAAA,MAAA,UAAeT,EAAKC,KAApB,0BAMH,EAIG,WACE,kBAAOA,KAAK,UACZ,kBAAOA,KAAK,YACZ,mBAAQS,KAAK,SAAb,0BAEF,SAAC,KAAD,MAGL,E,mBCvCYC,EAAkBC,EAAAA,GAAAA,MAAH,8HAQfC,EAAuBD,EAAAA,GAAAA,IAAH,wMAYpBE,EAAcF,EAAAA,GAAAA,MAAH,wG,oBCXXG,EAAS,WACpB,IAAM3B,GAASM,EAAAA,EAAAA,IAAYP,GACrBK,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAACkB,EAAD,YACE,kDACA,UAACE,EAAD,YACE,SAACC,EAAD,CACEJ,KAAK,OACLP,MAAOf,EACP4B,SAVa,SAAAC,GACnBzB,GAAS0B,EAAAA,EAAAA,GAAUD,EAAIlB,cAAcI,OACtC,EASOgB,YAAY,oBAEd,SAAC,MAAD,SAIP,EC9BYC,EAAoBR,EAAAA,GAAAA,GAAH,2GAMjBS,EAAqBT,EAAAA,GAAAA,GAAH,2KAUlBU,EAAkBV,EAAAA,GAAAA,OAAH,mKAUfW,EAAeX,EAAAA,GAAAA,EAAH,+EAMZY,EAAoBZ,EAAAA,GAAAA,EAAH,yC,UCnBjBa,EAAc,WACzB,IAAMxC,GAAWS,EAAAA,EAAAA,IAAYX,GACvBK,GAASM,EAAAA,EAAAA,IAAYP,GACrBK,GAAWC,EAAAA,EAAAA,MAEXiC,EAAmBtC,EAAOuC,cAC1BC,EAAkB3C,EAASG,QAC/B,SAAAiB,GAAO,OACLA,EAAQJ,MAAQI,EAAQJ,KAAK0B,cAAcE,SAASH,EAD/C,IAMT,OACE,SAACN,EAAD,UACGQ,EAAgBE,KAAI,SAAAzB,GACnB,OACE,UAACgB,EAAD,YACE,SAACG,EAAD,UAAoBnB,EAAQJ,QAC5B,UAACsB,EAAD,YACE,SAAC,MAAD,IACClB,EAAQD,WAEX,SAACkB,EAAD,CAAiBS,QAAS,kBAZfC,EAYkC3B,EAAQ2B,GAZpCxC,GAASyC,EAAAA,EAAAA,IAAcD,IAA7B,IAAAA,CAYe,EAA1B,UACE,SAAC,MAAD,QAPqB3B,EAAQ2B,GAWpC,KAGN,E,UCpCc,SAASE,IACtB,IAAM1C,GAAWC,EAAAA,EAAAA,MACXH,GAAYI,EAAAA,EAAAA,IAAYL,GAM9B,OAJA8C,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACV,GAAE,CAAC5C,KAGF,iCACE,SAACD,EAAD,KACA,SAACwB,EAAD,IACCzB,IAAa,SAAC+C,EAAA,EAAD,KACd,SAACZ,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/ContactList.styled.jsx","components/Contacts/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport toast, { Toaster } from 'react-hot-toast';\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const text = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n    const contactsArray = contacts.filter(\n      contact => contact.name === text.name\n    );\n\n    if (contactsArray.length !== 0) {\n      toast.error(`${text.name} is alredy in contacts`);\n      return;\n    }\n\n    dispatch(addContact(text));\n    form.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input name=\"name\" />\n        <input name=\"number\" />\n        <button type=\"submit\">Add task</button>\n      </form>\n      <Toaster />\n    </>\n  );\n};\n","import styled from 'styled-components';\nexport const StyledFiltrWrap = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  row-gap: 15px;\n  padding-top: 20px;\n`;\n\nexport const StyledFilterTextWrap = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 250px;\n  svg {\n    width: 25px;\n    height: 25px;\n    position: absolute;\n    right: 10px;\n  }\n`;\nexport const StyledInput = styled.input`\n  height: 30px;\n  width: 250px;\n  padding-left: 5px;\n  padding-right: 40px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport {\n  StyledFilterTextWrap,\n  StyledFiltrWrap,\n  StyledInput,\n} from './Filter.styled';\nimport { MdPersonSearch } from 'react-icons/md';\nimport { setFilter } from 'redux/contacts/filtersSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n  return (\n    <StyledFiltrWrap>\n      <b>Find contacts by name</b>\n      <StyledFilterTextWrap>\n        <StyledInput\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n          placeholder=\"Search name...\"\n        />\n        <MdPersonSearch />\n      </StyledFilterTextWrap>\n    </StyledFiltrWrap>\n  );\n};\n","import styled from 'styled-components';\nexport const StyledContactList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  padding: 20px 0;\n`;\nexport const StyledContactsItem = styled.li`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  border: 1px solid #196f3d;\n  border-radius: 5px;\n  padding: 5px 5px;\n  width: 430px;\n`;\n\nexport const StyledDeleteBtn = styled.button`\n  width: 50px;\n  background-color: transparent;\n  border: none;\n  svg {\n    color: #e74c3c;\n    width: 25px;\n    height: 25px;\n  }\n`;\nexport const StyledNumber = styled.p`\n  flex: 1 1 0%;\n  svg {\n    margin-right: 5px;\n  }\n`;\nexport const StyledContactText = styled.p`\n  flex: 1 1 0%;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  StyledContactList,\n  StyledContactText,\n  StyledContactsItem,\n  StyledDeleteBtn,\n  StyledNumber,\n} from './ContactList.styled';\nimport { MdClose } from 'react-icons/md';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { GiSmartphone } from 'react-icons/gi';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = contacts.filter(\n    contact =>\n      contact.name && contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <StyledContactList>\n      {filtredContacts.map(contact => {\n        return (\n          <StyledContactsItem key={contact.id}>\n            <StyledContactText>{contact.name}</StyledContactText>\n            <StyledNumber>\n              <GiSmartphone />\n              {contact.number}\n            </StyledNumber>\n            <StyledDeleteBtn onClick={() => handleDelete(contact.id)}>\n              <MdClose />\n            </StyledDeleteBtn>\n          </StyledContactsItem>\n        );\n      })}\n    </StyledContactList>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations.js';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor.js';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { ContactList } from 'components/Contacts/ContactList.jsx';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","ContactEditor","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","currentTarget","text","name","elements","value","number","contact","length","addContact","reset","toast","type","StyledFiltrWrap","styled","StyledFilterTextWrap","StyledInput","Filter","onChange","evt","setFilter","placeholder","StyledContactList","StyledContactsItem","StyledDeleteBtn","StyledNumber","StyledContactText","ContactList","normalizedFilter","toLowerCase","filtredContacts","includes","map","onClick","id","deleteContact","Contacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}